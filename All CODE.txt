((((EXP 8 Raspberrypi))))

import paho.mqtt.client as mqtt
import RPi.GPIO as GPIO
GPIO.setwarnings(False)


def on_connect(client, userdata, rc,properties=None):
    print ("Connected with rc: " + str(rc))
    client.subscribe("exp7/led")

def on_message(client, userdata, msg):
    print ("Topic: "+ msg.topic+"\nMessage:"+str(msg.payload))
    if b"1" in msg.payload:
        print("  Green on!")
        GPIO.output(11, True)
        
    if b"0" in msg.payload:
        print("  Green off!")
        GPIO.output(11, False)
        
        
        
    

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.connect("test.mosquitto.org", 1883, 60)

GPIO.setmode(GPIO.BOARD)
GPIO.setup(11, GPIO.OUT)

client.loop_forever()


((((EXP 4 local server with led))))

#include<ESP8266WiFi.h>

WiFiClient client;
WiFiServer server(80);

#define led D4

void setup() {
  Serial.begin(9600);
  WiFi.begin("iPhone","00000000");
  while(WiFi.status() != WL_CONNECTED)
  {
    Serial.print("...");
    delay(100); 
  }
  Serial.println();
  Serial.println("connected");
  Serial.println(WiFi.localIP());
  server.begin();
  pinMode(led,OUTPUT);
}

void loop() {
client = server.available();
     if(client == 1)
     {
      String req = client.readStringUntil('\n');
      req.trim();
      Serial.println(req);

      if(req == "GET /ledon HTTP/1.1")
      {
        digitalWrite(led,HIGH);
      }

      
      if(req == "GET /ledoff HTTP/1.1")
      {
        digitalWrite(led,LOW);
      }
      }
   client.println("HTTP/1.1 200 OK");
   client.println("Content-Type: text/html");
   client.println("");
   client.println("<!DOCTYPE html>");
   client.println("<head>");
   client.println("<title>Document</title>");
   client.println("</head>");
   client.println("<body>");
   client.println(" <h1>Control LED</h1>");
   client.println("<h2>esp 8266</h2>"); 
   client.println("<a href=\"/ledon\"\"><button>led1 on</button></a> ");
   client.println("<a href=\"/ledoff\"\"><button>led1 off</button></a>");
   client.println("</body>");
   client.println("</html>");
     }

((((((EXP 5 local server with dht11))))

#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include "DHT.h"

const char* ssid = "pass : FFH";  // Enter SSID here
const char* password = "11111111";  //Enter Password here

ESP8266WebServer server(80);

#define DHTTYPE DHT11   // DHT 11
#define DHTPin  D2
               
DHT dht(DHTPin, DHTTYPE);                

float Temperature;
float Humidity;
 
void setup() {
  Serial.begin(115200);
  delay(100);
  dht.begin();              
  Serial.println("Connecting to ");
  Serial.println(ssid);

  //connect to your local wi-fi network
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
  delay(100);
  Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected..!");
  Serial.println(WiFi.localIP());

  server.on("/", handle_OnConnect);
  server.onNotFound(handle_NotFound);

  server.begin();
  Serial.println("HTTP server started");

}
void loop() {
  
  server.handleClient();
  
}

void handle_OnConnect() {

 Temperature = dht.readTemperature(); // Gets the values of the temperature
  Humidity = dht.readHumidity(); // Gets the values of the humidity 
  Serial.println(Temperature);
  server.send(200, "text/html", SendHTML(Temperature,Humidity)); 
}

void handle_NotFound(){
  server.send(404, "text/plain", "Not found");
}

String SendHTML(float Temperaturestat,float Humiditystat){
  String ptr = "<!DOCTYPE html> <html>\n";
  ptr +="<title>ESP8266 Weather Report</title>\n";
  ptr +="<meta http-equiv='refresh' content='1'>";
  
  ptr +="<body>\n";
  ptr +="<h1>Weather Station</h1>\n";
  ptr +="<h1>\n";
  ptr +="<p>Temperature: "+String(Temperaturestat)+ " C</p>";
  ptr +="<p>Humidity: "+String(Humiditystat)+"%</p>";
  ptr +="</h1>\n";
  ptr +="</body>\n";
  ptr +="</html>\n";
  return ptr;
}

((((EXP 7 home automation blynk))))

#define BLYNK_TEMPLATE_ID "TMPLsbib9Cu2"
#define BLYNK_TEMPLATE_NAME "EXP7"
#define BLYNK_AUTH_TOKEN "e3r6mmcobch2vYKyLi40FKfV9zpvLOzG"
#define BLYNK_PRINT Serial

#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "BS-18_Lab";  // ENTER YOUR WIFI SSID
char pass[] = "workshop";  // ENTER YOUR WIFI PASSWORD

BLYNK_WRITE(V0)
{
  int value = param.asInt();
  Serial.println(value);
  if(value == 0)
  {
    digitalWrite(LED_BUILTIN,HIGH);
  }
  if(value == 1)
  {
    digitalWrite(LED_BUILTIN,LOW);
  }
}


void setup()
{  
  pinMode(D4,OUTPUT);
  Serial.begin(115200);
  Blynk.begin(auth, ssid, pass);  
}

void loop()
{
  Blynk.run();
}


((((EXP 3 OLED AND temp)))))

// himanshu fanibhare

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#include "DHT.h"

#define DHTPIN 2   

// Uncomment whatever type you're using!
#define DHTTYPE DHT11   // DHT 11


DHT dht(DHTPIN, DHTTYPE);

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for SSD1306 display connected using I2C
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void setup()
{
  Serial.begin(9600);
  dht.begin();
  // initialize the OLED object
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  display.clearDisplay();
}

void loop() {
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();


 display.clearDisplay();
display.setTextSize(2);
display.setTextColor(WHITE);
display.setCursor(0,10);
display.println("temp:"+String(t));
display.setCursor(0,45);
display.println("humi:"+String(h));
display.display();
delay(2000);

}


